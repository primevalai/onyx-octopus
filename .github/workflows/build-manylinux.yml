name: Build manylinux wheels

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build-manylinux:
    name: Build manylinux wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
        
    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
        working-directory: ./eventuali-python
        before-script-linux: |
          echo "Setting up build environment for ${{ matrix.target }}"
          
          if [ "${{ matrix.target }}" = "x86_64" ]; then
            echo "Installing OpenSSL for x86_64 native build"
            if command -v yum >/dev/null 2>&1; then
              # CentOS/RHEL-based manylinux containers
              yum update -y && yum install -y openssl-devel pkgconfig gcc
            elif command -v apt-get >/dev/null 2>&1; then
              # Debian/Ubuntu-based manylinux containers
              apt-get update && apt-get install -y libssl-dev pkg-config build-essential
            fi
          elif [ "${{ matrix.target }}" = "aarch64" ]; then
            echo "Setting up cross-compilation environment for aarch64"
            if command -v yum >/dev/null 2>&1; then
              # CentOS/RHEL-based manylinux containers
              yum update -y && yum install -y openssl-devel pkgconfig gcc gcc-aarch64-linux-gnu
            elif command -v apt-get >/dev/null 2>&1; then
              # Debian/Ubuntu-based manylinux containers  
              apt-get update && apt-get install -y libssl-dev pkg-config build-essential gcc-aarch64-linux-gnu
            fi
            # Set up cross-compilation toolchain (exported for build scripts)
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export CFLAGS_aarch64_unknown_linux_gnu="-march=armv8-a -D__ARM_ARCH=8"
            export CXXFLAGS_aarch64_unknown_linux_gnu="-march=armv8-a -D__ARM_ARCH=8"
            export TARGET_CC=aarch64-linux-gnu-gcc
            export TARGET_AR=aarch64-linux-gnu-ar
          else
            echo "Using vendored OpenSSL for ${{ matrix.target }} cross-compilation"
          fi
      env:
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        PKG_CONFIG_ALLOW_CROSS: 1
        # Fix ring crate ARM64 compilation issues
        CFLAGS_aarch64_unknown_linux_gnu: "-march=armv8-a -D__ARM_ARCH=8"
        CXXFLAGS_aarch64_unknown_linux_gnu: "-march=armv8-a -D__ARM_ARCH=8"
        CC_aarch64_unknown_linux_gnu: "aarch64-linux-gnu-gcc"
        CXX_aarch64_unknown_linux_gnu: "aarch64-linux-gnu-g++"
        AR_aarch64_unknown_linux_gnu: "aarch64-linux-gnu-ar"
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
        # Additional cross-compilation support
        TARGET_CC: "aarch64-linux-gnu-gcc"
        TARGET_AR: "aarch64-linux-gnu-ar"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-manylinux-${{ matrix.target }}
        path: ./eventuali-python/dist

  # Test wheels on different Python versions
  test-manylinux:
    name: Test manylinux wheels
    needs: [build-manylinux]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download manylinux wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-manylinux-x86_64
        path: dist/

    - name: Install UV
      run: pip install uv

    - name: Test wheel installation
      run: |
        uv venv test-env --python ${{ matrix.python-version }}
        uv pip install dist/*.whl --python test-env
        uv run --python test-env python -c "import eventuali; print('Package imports successfully on Python ${{ matrix.python-version }}')"
        
    - name: Run basic functionality test
      working-directory: ./eventuali-python
      run: |
        uv run --python test-env python -c "
        import asyncio
        from eventuali import EventStore
        
        async def test():
            store = EventStore()
            await store.create('sqlite://:memory:')
            print('Basic EventStore functionality works')
        
        asyncio.run(test())
        "