name: Build and Publish Eventuali Packages

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # IMPORTANT: mandatory for trusted publishing

jobs:
  # Build wheels for different platforms
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Protocol Buffers and OpenSSL (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler libssl-dev pkg-config

    - name: Install Protocol Buffers and OpenSSL (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install protobuf openssl pkg-config

    - name: Install Protocol Buffers (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc
        
    - name: Install UV
      run: pip install uv

    - name: Install maturin
      run: |
        uv tool install maturin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Build wheels (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ./eventuali-python
      run: |
        # Clean existing compiled artifacts
        rm -f python/eventuali/_eventuali.*.so python/eventuali/_eventuali.pyd
        uv run maturin build --release --out dist
      env:
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        OPENSSL_NO_VENDOR: 0
        
    - name: Build wheels (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./eventuali-python
      run: |
        # Clean existing compiled artifacts
        Remove-Item -Path "python\eventuali\_eventuali.pyd" -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "python\eventuali\_eventuali.*.so" -Force -ErrorAction SilentlyContinue
        uv add maturin
        uv run maturin build --release --out dist
      shell: pwsh
      env:
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        OPENSSL_NO_VENDOR: 0
        
    - name: Test wheel installation (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ./eventuali-python
      run: |
        uv venv test-env
        uv pip install dist/*.whl --python test-env
        uv run --python test-env python -c "import eventuali; print('✓ Package imports successfully')"
        
    - name: Test wheel installation (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./eventuali-python
      run: |
        uv venv test-env
        uv pip install dist/*.whl --python test-env
        uv run --python test-env python -c "import eventuali; print('Package imports successfully')"
      env:
        PYTHONIOENCODING: utf-8

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./eventuali-python/dist

  # Publish all packages to TestPyPI on every push to master
  publish-to-testpypi:
    name: Publish all packages to TestPyPI
    needs: [build, build-sdist, build-api-server, build-mcp-server]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    strategy:
      matrix:
        package: [
          { name: "eventuali", artifacts: "wheels-*,sdist", url: "https://test.pypi.org/p/eventuali" },
          { name: "eventuali-api-server", artifacts: "api-server-dist", url: "https://test.pypi.org/p/eventuali-api-server" },
          { name: "eventuali-mcp-server", artifacts: "mcp-server-dist", url: "https://test.pypi.org/p/eventuali-mcp-server" }
        ]
    environment:
      name: testpypi
      url: ${{ matrix.package.url }}

    steps:
    - name: Download ${{ matrix.package.name }} artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: ${{ matrix.package.artifacts }}
        merge-multiple: true

    - name: Publish ${{ matrix.package.name }} to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/

  # Publish all packages to PyPI on release tags
  publish-to-pypi:
    name: Publish all packages to PyPI
    needs: [build, build-sdist, build-api-server, build-mcp-server]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    strategy:
      matrix:
        package: [
          { name: "eventuali", artifacts: "wheels-*,sdist", url: "https://pypi.org/p/eventuali" },
          { name: "eventuali-api-server", artifacts: "api-server-dist", url: "https://pypi.org/p/eventuali-api-server" },
          { name: "eventuali-mcp-server", artifacts: "mcp-server-dist", url: "https://pypi.org/p/eventuali-mcp-server" }
        ]
    environment:
      name: pypi
      url: ${{ matrix.package.url }}

    steps:
    - name: Download ${{ matrix.package.name }} artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: ${{ matrix.package.artifacts }}
        merge-multiple: true

    - name: Publish ${{ matrix.package.name }} to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Protocol Buffers and OpenSSL
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler libssl-dev pkg-config

    - name: Install UV and maturin
      run: |
        pip install uv
        uv add maturin
      working-directory: ./eventuali-python

    - name: Build source distribution
      working-directory: ./eventuali-python
      run: uv run maturin sdist --out dist
      env:
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        OPENSSL_NO_VENDOR: 0

    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: ./eventuali-python/dist

  # Build API Server (Pure Python package)
  build-api-server:
    name: Build API Server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      run: pip install uv

    - name: Sync workspace dependencies
      run: uv sync

    - name: Build API Server
      working-directory: ./eventuali-api-server
      run: |
        # Build wheel and source distribution
        uv build --out-dir dist

    - name: Test API Server installation
      working-directory: ./eventuali-api-server
      run: |
        uv venv test-env
        uv pip install dist/*.whl --python test-env
        uv run --python test-env python -c "import eventuali_api_server; print('✓ API Server package imports successfully')"
        uv run --python test-env eventuali-api-server --help

    - name: Upload API Server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-server-dist
        path: ./eventuali-api-server/dist

  # Build MCP Server (Pure Python package)
  build-mcp-server:
    name: Build MCP Server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      run: pip install uv

    - name: Sync workspace dependencies
      run: uv sync

    - name: Build MCP Server
      working-directory: ./eventuali-mcp-server
      run: |
        # Build wheel and source distribution
        uv build --out-dir dist

    - name: Test MCP Server installation
      working-directory: ./eventuali-mcp-server
      run: |
        uv venv test-env
        uv pip install dist/*.whl --python test-env
        uv run --python test-env python -c "import eventuali_mcp_server; print('✓ MCP Server package imports successfully')"
        timeout 5s uv run --python test-env eventuali-mcp-server || echo "✓ MCP Server starts correctly"

    - name: Upload MCP Server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-server-dist
        path: ./eventuali-mcp-server/dist